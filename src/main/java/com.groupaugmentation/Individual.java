package com.groupaugmentation;


import com.groupaugmentation.util.RandomNumberGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class Individual implements Runnable {

    private final Logger log = LoggerFactory.getLogger(Individual.class);

    private double alpha;

    private double beta;

    private double drift;

    private double helpLevel;

    private double dispersal;

    private int age = 0;

    /**
     * This constructor is only used when the Individual is generated by a mother
     * is called when a new offspring is generated
     *
     * @param mother the mother of the individual
     */
    public Individual(Individual mother) {
        if (mother.getFishType() != FishType.BREEDER) {
            log.error("Something went wrong you cannot create an Individual from a non Breeder");
        }

        //modify alpha beta and drift for the new generation
        RandomNumberGenerator rng = RandomNumberGenerator.getInstance();

        this.alpha = mother.getAlpha();
        this.beta = mother.getBeta();
        this.drift = mother.getDrift();
        this.fishType = FishType.HELPER;

        if (rng.getNextRealUniform() < Settings.MUTATION_ALPHA) {
            this.alpha += rng.getNextGaussianAlpha();
        }

        if (rng.getNextRealUniform() < Settings.MUTATION_BETA) {
            this.beta += rng.getNextGaussianBeta();
        }

        if (rng.getNextRealUniform() < Settings.MUTATION_DRIFT) {
            this.drift += rng.getNextGaussianDrift();
        }

        //helplevel is always absolute alpha
        this.helpLevel = Math.abs(this.alpha);
        this.dispersal = Math.abs(this.beta);

        log.trace("New Offspring: " + this);

    }

    //constructor called when initializing new Individual
    public Individual(double alpha, double beta, FishType fishType) {
        this(alpha, beta);
        this.fishType = fishType;
    }

    //constructor called when initializing new Individual
    public Individual(double alpha, double beta) {
        this.fishType = FishType.HELPER;
        this.alpha = alpha;
        this.beta = beta;
        this.drift = RandomNumberGenerator.getInstance().getNextInitDriftUniform();

        this.helpLevel = Math.abs(alpha);
        this.dispersal = Math.abs(beta);
    }

    private FishType fishType;


    public FishType getFishType() {
        return fishType;
    }


    public double getAlpha() {
        return alpha;
    }

    public double getBeta() {
        return beta;
    }

    public double getDrift() {
        return drift;
    }

    public double getHelpLevel() {
        return helpLevel;
    }

    public double getDispersal() {
        return dispersal;
    }

    public void setFishType(FishType fishType) {
        this.fishType = fishType;
    }

    public int getAge() {
        return age;
    }

    public void increaseAge() {
        this.age++;
    }

    @Override
    public String toString() {
        return "Individual{" +
                "alpha=" + alpha +
                ", beta=" + beta +
                ", drift=" + drift +
                ", helpLevel=" + helpLevel +
                ", dispersal=" + dispersal +
                ", fishType=" + fishType +
                '}';
    }

    @Override
    public void run() {
        this.age++;
    }
}
