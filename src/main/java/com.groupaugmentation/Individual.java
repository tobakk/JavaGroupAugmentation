package com.groupaugmentation;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;

public class Individual {

    private final Logger log = LoggerFactory.getLogger(Individual.class);

    private BigDecimal alpha;

    private BigDecimal beta;

    private BigDecimal drift;


    /**
     * This constructor is only used when the Individual is generated by a mother
     *
     * @param mother the mother of the individual
     */
    public Individual(Individual mother) {
        if (mother.getFishType() != FishType.BREEDER) {
            log.error("Something went wrong you cannot create an Individual from a non Breeder");
        }

        //TODO modify alpha beta and drift for the new generation
        this.alpha = mother.getAlpha();
        this.beta = mother.getBeta();
        this.drift = mother.getDrift();
    }


    public Individual(BigDecimal alpha, BigDecimal beta, FishType fishType) {
        this(alpha, beta);
        this.fishType = fishType;
    }


    public Individual(BigDecimal alpha, BigDecimal beta) {
        this.fishType = FishType.HELPER;
        this.alpha = alpha;
        this.beta = beta;
    }

    private FishType fishType;


    public FishType getFishType() {
        return fishType;
    }

    public void setFishType(FishType fishType) {
        this.fishType = fishType;
    }

    public BigDecimal getAlpha() {
        return alpha;
    }

    public BigDecimal getBeta() {
        return beta;
    }

    public BigDecimal getDrift() {
        return drift;
    }
}
